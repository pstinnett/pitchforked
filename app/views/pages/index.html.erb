<div id="wrapper">
	<div id="header">
		<div id="title">
			<h1>Pitchforked</h1>
		</div>
	</div>
		<div id="mytrack">
			<p class="intro">Pitchforked creates a random playlist of tracks from Pitchfork.com's Best New Music section. <br /><br />Press 
			<%= 
				link_to_remote "Play",
					:url => { :action => "next_track" },
					:update => { :success => "mytrack", :failure => "error" },
					:html => { :class => "play_link" }
			%> to listen.</p>
			<div id="track_id" style="display:hidden"></div>
		</div>
		<div id="prev_track"></div>
	<div id="control-template"> 
	  <!-- control markup inserted dynamically after each link --> 
	  <div class="controls" onmouseover="showtiming()" onmouseout="hidetiming()"> 
	   <div class="statusbar"> 
	    <div class="loading"></div> 
	     <div class="position"></div> 
	   </div> 
	  </div> 
	  <div class="timing" id="timing"> 
		      <div id="sm2_timing" class="timing-data"><span class="sm2_position">%s1</span> / <span class="sm2_total">%s2</span></div>
	  </div>
	  <div class="peak"> 
	   <div class="peak-box"><span class="l"></span><span class="r"></span> 
	   </div> 
	  </div> 
	 </div> 

	 <div id="spectrum-container" class="spectrum-container"> 
	  <div class="spectrum-box"> 
	   <div class="spectrum"></div> 
	  </div> 
	 </div>
	</div>
	<script type="text/javascript">
		new Effect.Opacity('timing', { from: 0.0, to: 0.0, duration: 0.0 });
		var is_playing = true;
		function showtiming() {
			new Effect.Opacity('timing', { from: 0.0, to: 1.0, duration: 0.2 });
		}
		function hidetiming() {
			new Effect.Opacity('timing', { from: 1.0, to: 0.0, duration: 0.2 });
		}
		function togglePlay() {
			if (is_playing == true)
			{
				soundManager.pauseAll();
				is_playing = false;
			}
			else
			{
				soundManager.resumeAll();
				is_playing = true;
			}
		}
	</script>